/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package androidresizer;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.text.DefaultCaret;
import static javax.swing.text.DefaultCaret.ALWAYS_UPDATE;

/**
 *
 * @author planys
 */
public class AResizerFrame extends javax.swing.JFrame {

    private File originalDirectory;
    private File ldpiDirectory;
    private File mdpiDirectory;
    private File tvdpiDirectory;
    private File hdpiDirectory;
    private File xhdpiDirectory;
    private File xxhdpiDirectory;
    private File xxxhdpiDirectory;
    private File[] fileList;
    private File[] imageList;
    private String ext;
    private final String version = "1.4";

    /**
     * Creates new form NewJFrame
     */
    public AResizerFrame() {
        initComponents();
        try {
            java.net.URL url = ClassLoader.getSystemResource("androidresizer/ARIconSmall.png");
            Toolkit kit = Toolkit.getDefaultToolkit();
            Image img = kit.createImage(url);
            this.setIconImage(img);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        OutputTxtArea.append("\n");

        try {
            BufferedReader reader = new BufferedReader(new FileReader(".\\InputDirectory.txt"));

            FileField.setText(reader.readLine());

            reader.close();

        } catch (IOException ex) {
            
            Logger.getLogger(AResizerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (FileField.getText() != null) {
            File tempDirectory = new File(FileField.getText());
            originalDirectory = tempDirectory;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jOptionPane1 = new javax.swing.JOptionPane();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jPanel1 = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        ChooseLabel = new javax.swing.JLabel();
        FileField = new javax.swing.JTextField();
        BrowseButton = new javax.swing.JButton();
        GenerateButton = new javax.swing.JButton();
        chkLDPI = new javax.swing.JCheckBox();
        chkMDPI = new javax.swing.JCheckBox();
        chkTVDPI = new javax.swing.JCheckBox();
        chkHDPI = new javax.swing.JCheckBox();
        chkXHDPI = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTxtArea = new javax.swing.JTextArea();
        GenerateProgressBar = new javax.swing.JProgressBar();
        jSeparator2 = new javax.swing.JSeparator();
        PrefixText = new javax.swing.JTextField();
        PrefixCheckbox = new javax.swing.JCheckBox();
        CopyOriginChk = new javax.swing.JCheckBox();
        FolderLabel = new javax.swing.JLabel();
        OriginDensity = new javax.swing.JComboBox();
        chkXXHDPI = new javax.swing.JCheckBox();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Android Resizer - v" + version);
        setForeground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        setResizable(false);

        TitleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Android Resizer");

        ChooseLabel.setText("Choose");

        FileField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        FileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileFieldActionPerformed(evt);
            }
        });

        BrowseButton.setText("Browse...");
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        chkLDPI.setSelected(true);
        chkLDPI.setText("LDPI");
        chkLDPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLDPIActionPerformed(evt);
            }
        });

        chkMDPI.setSelected(true);
        chkMDPI.setText("MDPI");

        chkTVDPI.setText("TVDPI");
        chkTVDPI.setToolTipText("");

        chkHDPI.setSelected(true);
        chkHDPI.setText("HDPI");

        chkXHDPI.setSelected(true);
        chkXHDPI.setText("XHDPI");

        OutputTxtArea.setEditable(false);
        OutputTxtArea.setColumns(20);
        OutputTxtArea.setRows(5);
        OutputTxtArea.setText("Android Resizer\nv" + version + "\nCreated by Craig Currie\nIcons by Jan Putzan");
        jScrollPane1.setViewportView(OutputTxtArea);

        GenerateProgressBar.setToolTipText("");

        PrefixText.setText("drawable-");
        PrefixText.setToolTipText("This will determine what folders the downscaled images will create or be moved into. (Default is drawable-)");
        PrefixText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        PrefixText.setEnabled(false);
        PrefixText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrefixTextActionPerformed(evt);
            }
        });

        PrefixCheckbox.setToolTipText("This will determine what folders the downscaled images will create or be moved into. (Default is drawable-)");
        PrefixCheckbox.setActionCommand("PrefixCheck");
        PrefixCheckbox.setLabel("Override default prefix?");
        PrefixCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrefixCheckboxActionPerformed(evt);
            }
        });

        CopyOriginChk.setToolTipText("Select this to copy the source folder with the custom prefix");
        CopyOriginChk.setActionCommand("PrefixCheck");
        CopyOriginChk.setEnabled(false);
        CopyOriginChk.setLabel("Copy origin with prefix?");
        CopyOriginChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyOriginChkActionPerformed(evt);
            }
        });

        FolderLabel.setText("Folder");

        OriginDensity.setBackground(new java.awt.Color(153, 153, 153));
        OriginDensity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "XXXHDPI", "XXHDPI", "XHDPI", "HDPI", "TVDPI", "MDPI" }));
        OriginDensity.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OriginDensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OriginDensityActionPerformed(evt);
            }
        });

        chkXXHDPI.setSelected(true);
        chkXXHDPI.setText("XXHDPI");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 7, Short.MAX_VALUE)
                        .addComponent(FileField, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(BrowseButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkTVDPI)
                                            .addComponent(chkLDPI))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkMDPI)
                                            .addComponent(chkHDPI)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(GenerateButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(chkXHDPI)
                                        .addGap(16, 16, 16)
                                        .addComponent(chkXXHDPI))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(ChooseLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OriginDensity, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FolderLabel)))
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(TitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(GenerateProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CopyOriginChk)
                    .addComponent(PrefixCheckbox)
                    .addComponent(PrefixText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseLabel)
                    .addComponent(FolderLabel)
                    .addComponent(OriginDensity, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BrowseButton)
                .addGap(4, 4, 4)
                .addComponent(PrefixCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CopyOriginChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PrefixText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLDPI)
                    .addComponent(chkMDPI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTVDPI)
                    .addComponent(chkHDPI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkXHDPI)
                    .addComponent(chkXXHDPI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GenerateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GenerateProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName(getTitle());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CopyOriginChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyOriginChkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CopyOriginChkActionPerformed

    private void PrefixCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrefixCheckboxActionPerformed
        // TODO add your handling code here:
        if (PrefixCheckbox.isSelected()) {
            PrefixText.setEnabled(true);
            CopyOriginChk.setEnabled(true);
        } else {
            PrefixText.setEnabled(false);
            PrefixText.setText("drawable-");
            CopyOriginChk.setSelected(false);
            CopyOriginChk.setEnabled(false);

        }
    }//GEN-LAST:event_PrefixCheckboxActionPerformed

    private void PrefixTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrefixTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrefixTextActionPerformed

    private void chkLDPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLDPIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkLDPIActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        if (originalDirectory != null && !"".equals(originalDirectory.toString())) {

            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(".\\InputDirectory.txt"));

                writer.write(originalDirectory.toString());

                writer.close();

            } catch (IOException ex) {
                Logger.getLogger(AResizerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            GenerateButton.setEnabled(false);
            chkHDPI.setEnabled(false);
            chkXHDPI.setEnabled(false);
            chkXXHDPI.setEnabled(false);
            chkLDPI.setEnabled(false);
            chkMDPI.setEnabled(false);
            chkTVDPI.setEnabled(false);
            BrowseButton.setEnabled(false);
            PrefixCheckbox.setEnabled(false);
            CopyOriginChk.setEnabled(false);
            PrefixText.setEnabled(false);
            FileField.setEnabled(false);
            OriginDensity.setEnabled(false);

            OutputTxtArea.setText("");
            OutputTxtArea.append("Processing Images...\n");
            fileList = originalDirectory.listFiles();

            int i;

            //  for(i=0; i<fileList.length; i++){
            //      System.out.println(fileList[i].getName());
            ////      if(fileList[i].isFile()){
            ////          if(!fileList[i].isHidden()){
            ////              try{
            ////
            ////              imageList[imageList.length] = new File(fileList[i].getAbsolutePath());
            ////              }catch(NullPointerException e){
            ////              imageList[0] = new File(fileList[i].getAbsolutePath());
            ////              }
            ////          }
            ////      }
            //  }
            //  for(i=0; i<imageList.length; i++){
            //      System.out.println(imageList[i].getName());
            //  }
            //    try {
            Thread one = new Thread() {
                @Override
                public void run() {

                    try {
                        processImages();
                    } catch (IOException ex) {
                        Logger.getLogger(AResizerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };

            one.start();

            //        fileList[0];
            //  originalDirectory.listFiles();
            //    } catch (IOException ex) {
            //        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            //    }
        } else {
            OutputTxtArea.append("Directory doesn't exist!\n");
        }
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        //    new FolderChooser().setVisible(true);

        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.showOpenDialog(null);
        //chooser.
        originalDirectory = chooser.getSelectedFile();
        String directoryName = originalDirectory.getAbsolutePath();

        FileField.setText(directoryName);
        // TODO add your handling code here:
    }//GEN-LAST:event_BrowseButtonActionPerformed

    private void FileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileFieldActionPerformed

    private void OriginDensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OriginDensityActionPerformed
    switch (OriginDensity.getSelectedIndex()) {
            case 0:
                chkXXHDPI.setEnabled(true);
                chkXHDPI.setEnabled(true);
                chkHDPI.setEnabled(true);
                chkTVDPI.setEnabled(true);
                chkMDPI.setEnabled(true);
                chkLDPI.setEnabled(true);
                break;
            case 1:
                chkXXHDPI.setEnabled(false);
                chkXHDPI.setEnabled(true);
                chkHDPI.setEnabled(true);
                chkTVDPI.setEnabled(true);
                chkMDPI.setEnabled(true);
                chkLDPI.setEnabled(true);
                break;
            case 2:
                chkXXHDPI.setEnabled(false);
                chkXHDPI.setEnabled(false);
                chkHDPI.setEnabled(true);
                chkTVDPI.setEnabled(true);
                chkMDPI.setEnabled(true);
                chkLDPI.setEnabled(true);
                break;
            case 3:
                chkXXHDPI.setEnabled(false);
                chkXHDPI.setEnabled(false);
                chkHDPI.setEnabled(false);
                chkTVDPI.setEnabled(true);
                chkMDPI.setEnabled(true);
                chkLDPI.setEnabled(true);
                break;
            case 4:
                chkXXHDPI.setEnabled(false);
                chkXHDPI.setEnabled(false);
                chkHDPI.setEnabled(false);
                chkTVDPI.setEnabled(false);
                chkMDPI.setEnabled(true);
                chkLDPI.setEnabled(true);
                break;
            case 5:
                chkXXHDPI.setEnabled(false);
                chkXHDPI.setEnabled(false);
                chkHDPI.setEnabled(false);
                chkTVDPI.setEnabled(false);
                chkMDPI.setEnabled(false);
                chkLDPI.setEnabled(true);
                break;

        }        // TODO add your handling code here:
    }//GEN-LAST:event_OriginDensityActionPerformed

    public void processImages() throws IOException {

        DefaultCaret caret = (DefaultCaret) OutputTxtArea.getCaret();
        caret.setUpdatePolicy(ALWAYS_UPDATE);

        float XXHDPIScale = 0;
        float XHDPIScale = 0;
        float HDPIScale = 0;
        float TVDPIScale = 0;
        float MDPIScale = 0;
        float LDPIScale = 0;

        switch (OriginDensity.getSelectedIndex()) {
            case 0:
                //XXXHDPI
                XXHDPIScale = (float) 1.333;
                XHDPIScale = (float) 2;
                HDPIScale = (float) 2.666;
                TVDPIScale = (float) 3.008;
                MDPIScale = (float) 4;
                LDPIScale = (float) 5.333;
                break;
            case 1:
                //XXHDPI
                XHDPIScale = (float) 1.5;
                HDPIScale = (float) 2;
                TVDPIScale = (float) 2.256;
                MDPIScale = (float) 3;
                LDPIScale = (float) 4;

                break;
            case 2:
                XHDPIScale = (float) 1;
                HDPIScale = (float) 1.333;
                TVDPIScale = (float) 1.504;
                MDPIScale = (float) 2;
                LDPIScale = (float) 2.667;
                break;
            case 3:
                HDPIScale = (float) 1;
                TVDPIScale = (float) 1.128;
                MDPIScale = (float) 1.5;
                LDPIScale = (float) 2;
                break;
            case 4:
                TVDPIScale = (float) 1;
                MDPIScale = (float) 1.333;
                LDPIScale = (float) 1.777;
                break;
            case 5:
                MDPIScale = (float) 1;
                LDPIScale = (float) 1.333;
                break;

        }

        if (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() <= 0) {
            
            //XXXHDPI Processing

            xxxhdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "xxxhdpi");
            if (!xxxhdpiDirectory.exists()) {
                xxxhdpiDirectory.mkdir();
                OutputTxtArea.append("Creating " + PrefixText.getText() + "xxxhdpi\n");
            } else {
                OutputTxtArea.append(PrefixText.getText() + "xxxhdpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                System.out.println(fileList[i].getName());
                OutputTxtArea.append("Processing XXXHDPI - " + i + " of " + fileList.length + "\n");
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth());
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight());
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);

                    if (finalScaleX == 0) {
                        finalScaleX = 1;
                    }
                    if (finalScaleY == 0) {
                        finalScaleY = 1;
                    }

                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);

                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(xxxhdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("XXXHDPI complete\n");
        }
        
         if ((chkXXHDPI.isSelected() && OriginDensity.getSelectedIndex() <= 0)|| (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() == 1)) {
             
             //XXHDPI Process

            xxhdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "xxhdpi");
            if (!xxhdpiDirectory.exists()) {
                xxhdpiDirectory.mkdir();
                OutputTxtArea.append("Creating " + PrefixText.getText() + "xxhdpi\n");
            } else {
                OutputTxtArea.append(PrefixText.getText() + "xxhdpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                System.out.println(fileList[i].getName());
                OutputTxtArea.append("Processing XXHDPI - " + i + " of " + fileList.length + "\n");
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / XXHDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / XXHDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);

                    if (finalScaleX == 0) {
                        finalScaleX = 1;
                    }
                    if (finalScaleY == 0) {
                        finalScaleY = 1;
                    }

                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);

                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(xxhdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("XXHDPI complete\n");
        }
         
         
         if ((chkXHDPI.isSelected() && OriginDensity.getSelectedIndex() <= 1) || (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() == 2)) {
           
             //XHDPI Processing
             
             xhdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "xhdpi");
            if (!xhdpiDirectory.exists()) {
                OutputTxtArea.append("Creating " + PrefixText.getText() + "xhdpi\n");
                xhdpiDirectory.mkdir();
            } else {
                OutputTxtArea.append(PrefixText.getText() + "xhdpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                OutputTxtArea.append("Processing XHDPI - " + i + " of " + fileList.length + "\n");
                System.out.println(fileList[i].getName());
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / XHDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / XHDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);
                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);
                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(xhdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("XHDPI Complete\n");
        }
         
         
         if ((chkHDPI.isSelected() && OriginDensity.getSelectedIndex() <= 2) || (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() == 3)) {
           
            //HDPI Processing
            
            hdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "hdpi");
            if (!hdpiDirectory.exists()) {
                OutputTxtArea.append("Creating " + PrefixText.getText() + "hdpi\n");
                hdpiDirectory.mkdir();
            } else {
                OutputTxtArea.append(PrefixText.getText() + "hdpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                OutputTxtArea.append("Processing HDPI - " + i + " of " + fileList.length + "\n");
                System.out.println(fileList[i].getName());
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / HDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / HDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);
                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);
                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(hdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("HDPI Complete\n");
        }
         
         if ((chkTVDPI.isSelected() && OriginDensity.getSelectedIndex() <= 3) || (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() == 4)) {
            
            //TVDPI Processing
            
            tvdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "tvdpi");
            if (!tvdpiDirectory.exists()) {
                OutputTxtArea.append("Creating " + PrefixText.getText() + "tvdpi\n");
                tvdpiDirectory.mkdir();
            } else {
                OutputTxtArea.append(PrefixText.getText() + "tvdpi already exists, copying assets into this folder\n");
            }
            int i;

            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                OutputTxtArea.append("Processing TVDPI - " + i + " of " + fileList.length + "\n");
                System.out.println(fileList[i].getName());
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / TVDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / TVDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);
                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);
                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(tvdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("TVDPI complete\n");
        }
         
         if ((chkMDPI.isSelected() && OriginDensity.getSelectedIndex() <= 4)|| (CopyOriginChk.isSelected() && OriginDensity.getSelectedIndex() == 5)) {
            
            //MDPI Processing
            
            mdpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "mdpi");
            if (!mdpiDirectory.exists()) {
                mdpiDirectory.mkdir();
                OutputTxtArea.append("Creating " + PrefixText.getText() + "mdpi\n");
            } else {
                OutputTxtArea.append(PrefixText.getText() + "mdpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                OutputTxtArea.append("Processing MDPI - " + i + " of " + fileList.length + "\n");
                System.out.println(fileList[i].getName());
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / MDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / MDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);
                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);
                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(mdpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("MDPI complete\n");
        }
        
         

        if (chkLDPI.isSelected() && OriginDensity.getSelectedIndex() <= 5) {
            
            //LDPI Processing
            
            GenerateProgressBar.setString("TEST");
            ldpiDirectory = new File(originalDirectory.getParent() + "/" + PrefixText.getText() + "ldpi");
            if (!ldpiDirectory.exists()) {
                ldpiDirectory.mkdir();
                OutputTxtArea.append("Creating " + PrefixText.getText() + "ldpi\n");
            } else {
                OutputTxtArea.append(PrefixText.getText() + "ldpi already exists, copying assets into this folder\n");
            }
            int i;
            GenerateProgressBar.setMaximum(fileList.length);
            for (i = 0; i < fileList.length; i++) {
                GenerateProgressBar.setValue(i);
                System.out.println(fileList[i].getName());
                OutputTxtArea.append("Processing LDPI - " + i + " of " + fileList.length + "\n");
                String fileName = fileList[i].getName();
                if (fileName.contains(".png") || fileName.contains(".gif") || fileName.contains(".jpg")) {
                    ext = fileName.substring(fileName.length() - 3);
                    System.out.println(ext);
                    BufferedImage img = ImageIO.read(fileList[i]);
                    float scaleX = (float) (img.getWidth() / LDPIScale);
//                scaleX = (float) (scaleX / 4);
//                scaleX = (float) (scaleX * 3);
                    float scaleY = (float) (img.getHeight() / LDPIScale);
// scaleY = (float) (scaleY / 4);
//                scaleY = (float) (scaleY * 3);

                    int finalScaleX = (int) scaleX;
                    int finalScaleY = (int) scaleY;
                    System.out.println("Image: " + fileName + "| Height: " + finalScaleY + "| Width: " + finalScaleX);

                    if (finalScaleX == 0) {
                        finalScaleX = 1;
                    }
                    if (finalScaleY == 0) {
                        finalScaleY = 1;
                    }

                    Image newImg = img.getScaledInstance(finalScaleX, finalScaleY, Image.SCALE_SMOOTH);

                    BufferedImage bImage;
                    if (img.getColorModel().toString().contains("has alpha = false")) {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

                    } else {
                        bImage = new BufferedImage(newImg.getWidth(null), newImg.getHeight(null), BufferedImage.TYPE_INT_ARGB);

                    }

                    Graphics2D bImageGraphics = bImage.createGraphics();

                    bImageGraphics.drawImage(newImg, null, null);

                    RenderedImage rImage = (RenderedImage) bImage;

                    File outputfile = new File(ldpiDirectory + "/" + fileName);
//    ImageIO.write((RenderedImage) newImg, "png", outputfile);
//for (Picture pic : allPictures){
//    File newFilePic = new File(fileName);
                    ImageIO.write(rImage, ext, outputfile);

//    pic.writeImageContent(new DataOutputStream(new FileOutputStream(newFilePic)));
//    FileUtils.copyFileToDirectory(newFilePic, new File(tmpDir.toString()));
//    FileUtils.forceDelete(newFilePic);
//}
                }
            }
            GenerateProgressBar.setValue(0);
            OutputTxtArea.append("LDPI complete\n");
        }
        
        
        

        OutputTxtArea.append("Re-sizing complete.");
        
        Toolkit.getDefaultToolkit().beep();

        GenerateButton.setEnabled(true);
        chkXXHDPI.setEnabled(true);
        chkHDPI.setEnabled(true);
        chkXHDPI.setEnabled(true);
        chkLDPI.setEnabled(true);
        chkMDPI.setEnabled(true);
        chkTVDPI.setEnabled(true);
        BrowseButton.setEnabled(true);
        PrefixCheckbox.setEnabled(true);
        FileField.setEnabled(true);
        OriginDensity.setEnabled(true);

        if (PrefixCheckbox.isSelected()) {
            PrefixText.setEnabled(true);
            CopyOriginChk.setEnabled(true);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                System.out.println(info.getName());
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AResizerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AResizerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AResizerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AResizerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AResizerFrame().setVisible(true);
            }
        });

    }

    public void test() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseButton;
    private javax.swing.JLabel ChooseLabel;
    public javax.swing.JCheckBox CopyOriginChk;
    private javax.swing.JTextField FileField;
    private javax.swing.JLabel FolderLabel;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JProgressBar GenerateProgressBar;
    private javax.swing.JComboBox OriginDensity;
    private javax.swing.JTextArea OutputTxtArea;
    public javax.swing.JCheckBox PrefixCheckbox;
    private javax.swing.JTextField PrefixText;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JCheckBox chkHDPI;
    private javax.swing.JCheckBox chkLDPI;
    private javax.swing.JCheckBox chkMDPI;
    private javax.swing.JCheckBox chkTVDPI;
    private javax.swing.JCheckBox chkXHDPI;
    private javax.swing.JCheckBox chkXXHDPI;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    // End of variables declaration//GEN-END:variables
}
